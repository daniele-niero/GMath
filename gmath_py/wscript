import os, sys
from waflib import Logs
from waflib import Utils
import optparse


APPNAME = '_gmath.py'
VERSION = '3.0'

top = '.'
out = 'build'


def options(ctx):
    ctx.load('compiler_cxx')

    gr=ctx.add_option_group("Maya configuration options")
    gr.add_option("--maya",
                  action='store_true',
                  default=False,
                  help='Set if you want to build gmath for Maya and link it against mayapy (Maya\'s python). '
                        'If false, the options below will not be taken in consideration. '
                        'Also note that choosing Maya, the python options will be overridden to link against mayapy. '
                        '[default: %default]')

    ctx.load('maya', tooldir=r'../waftools')
    ctx.load('python', tooldir=r'../waftools')

    gr=ctx.add_option_group("Swig configuration options")
    gr.add_option("--swig", default='', dest='swig', help='Where to find Swig', type='string', action='store')


    # change the default --prefix option
    grp = ctx.get_option_group('configure options')
    grp.add_option('--prefix', default='', dest='prefix', help=optparse.SUPPRESS_HELP)
    grp.add_option('--install-path', default='', help='path to install gmath.py and _gmath.pyd')
    grp.add_option('--extra-install-paths', default='', help='comma-separated list of installation paths to add to the main install path')


def configure(ctx):
    ctx.env.SWIG = os.path.join(ctx.options.swig, 'swig')

    ctx.load('compiler_cxx')
    if ctx.options.maya:
        ctx.load('maya', tooldir=r'../waftools')
    else:
        ctx.load('python', tooldir=r'../waftools')

    if sys.platform=='win32':
        ctx.env.append_value('CXXFLAGS', ['-EHsc'])
    else:
        ctx.env.append_value('CXXFLAGS', ['-std=c++11', '-stdlib=libc++'])

    if not ctx.options.install_path:
        ctx.options.install_path = ctx.env['PYTHON_SITEPACKAGES']
    ctx.env['INSTALL_PATHS'] = [ctx.options.install_path]
    if ctx.options.extra_install_paths:
        for path in ctx.options.extra_install_paths.split(','):
            ctx.env['INSTALL_PATHS'].append(path)
    ctx.msg("Install Path(s)", ctx.env['INSTALL_PATHS'])


def build(ctx):
    from waflib.Build import POST_LAZY
    ctx.post_mode = POST_LAZY

    buildNode = ctx.path.ctx.bldnode
    buildNode.make_node('gmath.pyc').write('')
    swigTargets = [buildNode.make_node('gmath.py'),
                   buildNode.make_node('gmath.pyc'),
                   buildNode.make_node('gmRoot_wrap.cxx')]


    with_py3  = ' -py3 -DPYENUM' if float(ctx.env.PYTHON_VERSION) >= 3.0 else ''
    with_maya = ' -DPYMAYA' if ctx.env.MAYA else ''
    rule = '{} -c++ -python{}{} -I{}/../include -outdir . -outcurrentdir'.format(ctx.env.SWIG,
                                                                                 with_py3,
                                                                                 with_maya,
                                                                                 ctx.path.abspath())
    rule += ' ${SRC}'

    ctx(rule=rule,
        source='gmRoot.i',
        target=swigTargets,
        name='swig',
        color='YELLOW')

    ctx.add_manual_dependency(
        ctx.path.find_node('gmRoot.i'),
        ctx.path.ant_glob('*.i')
        )


    libs = [ctx.env['PYTHON_LIB']]
    if ctx.env.MAYA:
        libs.append('OpenMaya')
        libs.append('Foundation')


    ctx.add_group()
    ctx.shlib(
        source = ctx.path.find_node("../source").ant_glob("*.cpp"),
        dynamic_source='*_wrap.cxx',
        target = '_gmath',

        features = 'pyext_patterns cxx cxxshlib',

        cflags  = '-O2 -Zhi',

        includes = [os.path.join(ctx.path.abspath(), "../include"), ctx.env['PYTHON_INCLUDE']],

        lib = libs,
        libpath = [ctx.env['PYTHON_LIBPATH']],

        install_path = None,

        use='swig'
        )

    for install_path in ctx.env['INSTALL_PATHS']:
        ctx.install_files(install_path, [buildNode.find_node('gmath.py'), buildNode.find_node('_gmath.pyd')])


# support for the "dynamic_source" attribute follows
# taken from waf playground/dynamic_build
#
# bld(dynamic_source='*.cxx', ..) will search for source files to add to the attribute 'source'
from waflib import TaskGen
@TaskGen.feature('cxx')
@TaskGen.before('process_source', 'process_rule')
def dynamic_post(self):
    if not getattr(self, 'dynamic_source', None):
        return

    buildNode = self.path.ctx.bldnode
    self.source = Utils.to_list(self.source)
    dynamic_source = buildNode.ant_glob(self.dynamic_source, remove=False)
    if not dynamic_source:
        Logs.warn("*** nothing dynamically added ***")
    self.source.extend(dynamic_source)




