APPNAME = '_gmath.py'
VERSION = '2.0'

top = '.'
out = 'build'


def options(ctx):
    ctx.load('swig')
    ctx.load('compiler_cxx')
    ctx.load('maya')

def configure(ctx):
    ctx.load('swig')
    ctx.load('compiler_cxx')
    ctx.load('maya')

# def get_library_name():
#     if hasattr(config, "library_name"):
#         library_name = config.library_name
#     else:
#         library_name = "gmath"
#     return library_name

import time
from waflib import Task, Logs
class swig(Task.Task):
    color   = 'PINK'
    run_str = '${SWIG} ${SWIGFLAGS} ${SWIGPATH_ST:INCPATHS} ${SWIGDEF_ST:DEFINES} ${SRC}'

    def scan(self):
        # Logs.info('-> calling the scanner method')
        bld = self.generator.bld
        swigifies = []
        for input in self.inputs:
            Logs.info("SUKA " + str(input))
            swigifies.append(bld.path.find_node(str(input).replace('.i', '_wrap.c')))
        #     print input.read()
        # Logs.info(swigifies)
        return (swigifies, time.time())

    def runnable_status(self):
        ret = super(swig, self).runnable_status()
        bld = self.generator.bld
        print self.uid()
        print('nodes:       %r' % bld.node_deps[self.uid()])
        print('custom data: %r' % bld.raw_deps[self.uid()])
        return ret

def build(ctx):
    tg = swig(env=ctx.env)
    tg.set_inputs(ctx.path.ant_glob("*.i"))
    ctx.add_to_group(tg)

    print tg.scan()

    # help(tg)
    